name: Tests

on:
  push:
    branches:
      - 'main'
  pull_request: {}

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.filter.outputs.packages }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            packages:
              - 'packages/**'
              - 'targets/**'
              - 'cypress/**'
              - '.github/workflows/checks.yml'
              - '.github/workflows/tests.yml'
  build:
    needs: changes
    if: ${{ needs.changes.outputs.packages == 'true' }}
    name: 'Build'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18.x']

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --immutable

      - name: Build
        run: yarn build --filter=!@react-spring/docs

      - name: Pack
        run: yarn package

      # Upload artifact...

  test-unit:
    name: 'Test:unit'
    needs: [build]
    if: ${{ needs.changes.outputs.packages == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18.x']

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --immutable

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test:unit

  test-types:
    name: 'Test:types with TS ${{ matrix.ts }}'
    needs: [build]
    if: ${{ needs.changes.outputs.packages == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18.x']
        ts: ['4.4', '4.5', '4.6', '4.7', '4.8', '4.9']

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --immutable

      - name: Install TypeScript ${{ matrix.ts }}
        run: yarn add typescript@${{ matrix.ts }}

      - name: Build
        run: yarn build

      - name: Test
        run: |
          yarn tsc --version
          yarn test:ts

  test-e2e:
    needs: [build]
    if: ${{ needs.changes.outputs.packages == 'true' }}
    name: 'Test:E2E'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18.x']

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --immutable

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test:e2e

  test-published-artifact:
    needs: [build]
    if: ${{ needs.changes.outputs.packages == 'true' }}
    name: 'Test:publish'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18.x']
        example:
          [
            'cra4',
            'cra5',
            'next',
            'vite',
            'node-standard',
            'node-esm',
            'are-the-types-wrong',
          ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --immutable
